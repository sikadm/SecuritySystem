--based off lecture 8 resource
library ieee;
use ieee.std_logic_1164.ALL;
use ieee.numeric_std.ALL;

entity armed is
	port(
		clk, reset: in std_logic;
		pixel_x, pixel_y: in std_logic_vector(9 downto 0);
		text_on: out std_logic_vector(3 downto 0);
		text_rgb: out std_logic_vector(2 downto 0)
	);
end armed;

architecture arch of armed is
	signal pix_x, pix_y: unsigned(9 downto 0);
	signal rom_addr: std_logic_vector(10 downto 0);
	signal char_addr, char_addr_o: std_logic_vector(6 downto 0);
	signal row_addr,row_addr_o: std_logic_vector(3 downto 0);
	signal bit_addr,bit_addr_o: std_logic_vector(2 downto 0);
	signal font_word: std_logic_vector(7 downto 0);
	signal font_bit: std_logic;
	signal armed_on: std_logic;

begin
	pix_x <= unsigned(pixel_x);
	pix_y <= unsigned(pixel_y);
-- instantiate font rom
	font_unit: entity work.font_rom
	port map(clk=>clk, addr=>rom_addr, data=>font_word);
--Display System Armed
armed_on <=
	'1' when pix_y(9 downto 6)=3 and 5<= pix_x(9 downto 5) and pix_x(9 downto 5)<=13 else'0';
	row_addr_o <= std_logic_vector(pix_y(5 downto 2));
	bit_addr_o <= std_logic_vector(pix_x(4 downto 2));
	with pix_x(8 downto 5) select
	char_addr_o <=
		"1010011" when "0100", -- S
		"1111001" when "0101", -- y
		"1110011" when "0110", -- s
		"1110100" when "0111", -- t
		"1100101" when "1000", -- e
		"1101101" when "1001", -- m
		"0000000" when "1010", -- 
		"1000001" when "1011", -- A
		"1110010" when "1100"; -- r
		"1101101" when "1101", -- m
		"1100101" when "1110", -- e
		"1100100" when "1111", -- d
	 
-- mux for font ROM addresses and rgb
process(pix_x, pix_y, font_bit,char_addr_o,row_addr_o,bit_addr_o)
begin
	text_rgb <= "000"; -- background, black
	if armed_on='1' then
		char_addr <= char_addr_o;
		row_addr <= row_addr_o;
		bit_addr <= bit_addr_o;
		text_rgb <= "010";
end if;
end process;
	text_on <= armed_on;

-- font rom interface
	rom_addr <= char_addr & row_addr;
	font_bit <= font_word(to_integer(unsigned(not bit_addr)));
	
end arch;
